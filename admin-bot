import psycopg2
import telebot
import bcrypt
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import pandas as pd
from tabulate import tabulate
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
API_TOKEN = '8004813663:AAEIGYOB-mZGhxZsggIPvIiJ8FUfUoRgFdw'

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'dbname': 'library_bot',
    'user': 'amina',
    'password': '_auMW{\zp.,+wS<=_4k7uNgE)gr_Jp',
    'host': 'localhost',
    'port': '5432'
}


bot = telebot.TeleBot(API_TOKEN)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–æ–ª—è–º–∏
def hash_password(password):
    """–•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º bcrypt."""
    salt = bcrypt.gensalt()  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–ª–∏
    hashed = bcrypt.hashpw(password.encode('utf-8'), salt)  # –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    return hashed.decode('utf-8')


def verify_password(password, hashed_password):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É."""
    return bcrypt.checkpw(password.encode('utf-8'), hashed_password.encode('utf-8'))


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å —ç–º–æ–¥–∑–∏
def get_admin_menu():
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üìö –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É"))
    markup.add(KeyboardButton("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏"))
    markup.add(KeyboardButton("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"))
    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_books_from_db():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        with psycopg2.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cursor:
                query = "SELECT id, title FROM books;"
                cursor.execute(query)
                books = cursor.fetchall()
                return books
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–∏–≥–∞–º–∏
def create_books_markup():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥."""
    books = get_books_from_db()
    markup = InlineKeyboardMarkup(row_width=2)
    if books:
        for book in books:
            markup.add(InlineKeyboardButton(book[1], callback_data=f"delete_{book[0]}"))
    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–Ω—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_genres_from_db():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤ –∫–Ω–∏–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        with psycopg2.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cursor:
                query = "SELECT DISTINCT genre FROM books WHERE genre IS NOT NULL;"
                cursor.execute(query)
                genres = cursor.fetchall()
                return [genre[0] for genre in genres]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∂–∞–Ω—Ä–∞–º–∏
def create_genre_markup():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∂–∞–Ω—Ä–æ–≤."""
    genres = get_genres_from_db()
    markup = InlineKeyboardMarkup(row_width=2)
    if genres:
        for genre in genres:
            markup.add(InlineKeyboardButton(genre, callback_data=genre))
    markup.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∂–∞–Ω—Ä", callback_data="new_genre"))
    return markup


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."""
    user_id = message.from_user.id
    chat_id = message.chat.id

    if is_admin(user_id):
        bot.send_message(chat_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
                         reply_markup=get_admin_menu())
    else:
        bot.send_message(chat_id,
                         "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø.")
        bot.register_next_step_handler(message, check_access)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def is_admin(telegram_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    try:
        with psycopg2.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cursor:
                query = "SELECT role FROM admins WHERE telegram_id = %s;"
                cursor.execute(query, (str(telegram_id),))
                result = cursor.fetchone()
                return result is not None and result[0] == '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return False


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['register'])
def register_user(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    chat_id = message.chat.id
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    bot.register_next_step_handler(message, process_user_email)


def process_user_email(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ email."""
    email = message.text.strip()
    if "@" not in email:
        bot.send_message(message.chat.id, "‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, process_user_email)
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å (–Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤):")
    bot.register_next_step_handler(message, process_user_password, email)


def process_user_password(message, email):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ö—ç—à–∞ –ø–∞—Ä–æ–ª—è."""
    password = message.text.strip()
    if len(password) < 8:
        bot.send_message(message.chat.id, "‚ùó –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, process_user_password, email)
        return

    hashed_password = hash_password(password)  # –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    try:
        with psycopg2.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cursor:
                query = """
                INSERT INTO users (telegram_id, email, password_hash, name, surname, role)
                VALUES (%s, %s, %s, '–ò–º—è', '–§–∞–º–∏–ª–∏—è', '—É—á–µ–Ω–∏–∫')
                """
                cursor.execute(query, (message.chat.id, email, hashed_password))
                conn.commit()
                bot.send_message(message.chat.id, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É"
@bot.message_handler(func=lambda message: message.text == "üìö –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É")
def add_book(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏."""
    chat_id = message.chat.id
    bot.send_message(chat_id, "üîç –í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∫–Ω–∏–≥–∏:", reply_markup=create_genre_markup())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –¥–ª—è –∂–∞–Ω—Ä–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏."""
    if call.data.startswith("delete_"):
        book_id = call.data.split("delete_")[1]
        chat_id = call.message.chat.id
        try:
            with psycopg2.connect(**DB_CONFIG) as conn:
                with conn.cursor() as cursor:
                    query = "DELETE FROM books WHERE id = %s;"
                    cursor.execute(query, (book_id,))
                    conn.commit()
                    bot.send_message(chat_id, f"‚úÖ –ö–Ω–∏–≥–∞ —Å ID {book_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        except Exception as e:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏.")
            print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=create_books_markup())
    elif call.data == "new_genre":
        chat_id = call.message.chat.id
        bot.send_message(chat_id, "‚úç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∂–∞–Ω—Ä–∞:")
        bot.register_next_step_handler(call.message, process_new_genre)
    else:
        genre = call.data
        chat_id = call.message.chat.id
        bot.send_message(chat_id, f"üìñ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∂–∞–Ω—Ä: {genre}. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:")
        bot.register_next_step_handler(call.message, process_book_title, genre)
    bot.answer_callback_query(call.id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∂–∞–Ω—Ä–∞
def process_new_genre(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∂–∞–Ω—Ä–∞."""
    genre = message.text.strip()
    chat_id = message.chat.id

    if not genre:
        bot.send_message(chat_id, "‚ùó –ù–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, process_new_genre)
        return

    try:
        with psycopg2.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cursor:
                cursor.execute("SELECT COUNT(*) FROM books WHERE genre = %s;", (genre,))
                count = cursor.fetchone()[0]

                if count > 0:
                    bot.send_message(chat_id, f"‚ö† –ñ–∞–Ω—Ä '{genre}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                else:
                    cursor.execute("UPDATE books SET genre = %s WHERE genre IS NULL;", (genre,))
                    conn.commit()
                    bot.send_message(chat_id, f"‚úÖ –ñ–∞–Ω—Ä '{genre}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

        # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–∞–Ω—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
        bot.send_message(chat_id, f"üìñ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∂–∞–Ω—Ä: {genre}. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:")
        bot.register_next_step_handler(message, process_book_title, genre)

    except Exception as e:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∂–∞–Ω—Ä–∞.")
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏
def process_book_title(message, genre):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏."""
    title = message.text.strip()
    chat_id = message.chat.id
    bot.send_message(chat_id, "üñã –í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏:")
    bot.register_next_step_handler(message, process_book_author, genre, title)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
def process_book_author(message, genre, title):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏."""
    author = message.text.strip()
    chat_id = message.chat.id
    bot.send_message(chat_id, "üìú –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:")
    bot.register_next_step_handler(message, process_book_description, genre, title, author)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∫–Ω–∏–≥–∏
def process_book_description(message, genre, title, author):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–Ω–∏–≥–∏."""
    description = message.text.strip()
    chat_id = message.chat.id
    bot.send_message(chat_id, "üìä –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π –∫–Ω–∏–≥–∏:")
    bot.register_next_step_handler(message, process_book_copies, genre, title, author, description)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
def process_book_copies(message, genre, title, author, description):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π –∫–Ω–∏–≥–∏."""
    chat_id = message.chat.id
    try:
        total_copies = int(message.text.strip())
        if total_copies < 1:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")

        with psycopg2.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cursor:
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –≤ —Ç–∞–±–ª–∏—Ü—É books
                query_books = """
                INSERT INTO books (title, author, genre, description)
                VALUES (%s, %s, %s, %s) RETURNING id;
                """
                cursor.execute(query_books, (title, author, genre, description))
                book_id = cursor.fetchone()[0]  # –ü–æ–ª—É—á–∞–µ–º ID –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∫–Ω–∏–≥–∏

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ø–∏—è—Ö –≤ —Ç–∞–±–ª–∏—Ü—É book_inventory
                query_inventory = """
                INSERT INTO book_inventory (book_id, total_copies, available_copies)
                VALUES (%s, %s, %s);
                """
                cursor.execute(query_inventory, (book_id, total_copies, total_copies))

                conn.commit()
                bot.send_message(chat_id, "‚úÖ –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")

        bot.send_message(chat_id, "üîß –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_menu())

    except ValueError:
        bot.send_message(chat_id, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π.")
        bot.register_next_step_handler(message, process_book_copies, genre, title, author, description)
    except Exception as e:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏.")
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        bot.send_message(chat_id, "üîß –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_menu())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏"
@bot.message_handler(func=lambda message: message.text == "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏")
def delete_book(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏."""
    chat_id = message.chat.id
    bot.send_message(chat_id, "üîç –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=create_books_markup())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"
@bot.message_handler(func=lambda message: message.text == "üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞")
def generate_report(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–Ω–∏–≥–∞–º."""
    chat_id = message.chat.id
    try:
        books = get_books_from_db()
        if books:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç —Ç–∞–±–ª–∏—Ü—ã
            df = pd.DataFrame(books, columns=["ID", "Title"])
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DataFrame –≤ —Å—Ç—Ä–æ–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º tabulate –¥–ª—è –ª—É—á—à–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            report = tabulate(df, headers='keys', tablefmt='grid', showindex=False)
            bot.send_message(chat_id, f"üìë –û—Ç—á–µ—Ç –ø–æ –∫–Ω–∏–≥–∞–º:\n{report}")
        else:
            bot.send_message(chat_id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥ –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
    except Exception as e:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞: {e}")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def check_access(message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É Telegram ID."""
    chat_id = message.chat.id
    telegram_id = message.text.strip()
    if is_admin(telegram_id):
        bot.send_message(
            chat_id,
            "‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=get_admin_menu()
        )
    else:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@bot.message_handler(func=lambda message: True)
def handle_unknown_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    chat_id = message.chat.id
    bot.send_message(chat_id,
                     "‚ùì –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ!")


if __name__ == '__main__':
    bot.polling(none_stop=True)
